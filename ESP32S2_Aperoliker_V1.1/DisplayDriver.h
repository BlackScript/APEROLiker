/**
 * Includes all display functions
 *
 * @author    Florian Staeblein
 * @date      2024/01/28
 * @copyright Â© 2024 Florian Staeblein
 */
 
#ifndef DISPLAYDRIVER_H
#define DISPLAYDRIVER_H

//===============================================================
// Includes
//===============================================================
#include "Config.h"
#include <Arduino.h>
#include <SPI.h>
#include <SPIFFS.h>
#include "SPIFFS_ImageReader.h"
#include <Adafruit_GFX.h>
#include <Adafruit_ST7789.h>
#include <Fonts/FreeSans9pt7b.h>
#include "AngleHelper.h"


//===============================================================
// Defines
//===============================================================
#define TFT_DEG2RAD                 0.017453292519943295769236907684886F
#define TFT_WIDTH                   240
#define TFT_HEIGHT                  240

#define HEADEROFFSET_Y              30
#define HEADER_MARGIN               10
#define X0_DOUGHNUTCHART            65
#define Y0_DOUGHNUTCHART            130
#define R_INNER_DOUGHNUTCHART       30
#define R_OUTER_DOUGHNUTCHART       60
#define X_LEGEND                    (X0_DOUGHNUTCHART + R_OUTER_DOUGHNUTCHART + 10)
#define Y_LEGEND                    (Y0_DOUGHNUTCHART - R_OUTER_DOUGHNUTCHART)
#define WIDTH_LEGEND                (TFT_WIDTH - X_LEGEND - 10)
#define HEIGHT_LEGEND               (TFT_HEIGHT - Y_LEGEND - 10)

#define INFOBOX_MARGIN_VERT         60
#define INFOBOX_MARGIN_HORI         25
#define INFOBOX_CORNERRADIUS        8

#define SHORTLINEOFFSET             20
#define LONGLINEOFFSET              30
#define LOONGLINEOFFSET             50
#define SPACERANGLE_DEGREES         1  // Angle which will be displayed as spacer between pie elements (will be multiplied by 2, left and right of the setting angle)

#define MENU_MARGIN_HORI            18
#define MENU_MARGIN_ICON            55
#define MENU_SELECTOR_HEIGHT        38
#define MENU_SELECTOR_CORNERRADIUS  8
#define MENU_LINEOFFSET             43

#define BARGRAPH_MARGIN_HORI        34


//===============================================================
// Icons
//===============================================================
// 'cleaning', 32x32px
const unsigned char icon_cleaning [] PROGMEM =
{
	0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x88, 0x24, 0xc2, 0x01, 
	0x90, 0x35, 0xc0, 0x21, 0x20, 0x84, 0xc0, 0x71, 0x40, 0x44, 0x00, 0x20, 0x88, 0x20, 0x03, 0x00, 
	0x10, 0x04, 0x01, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x7f, 0xdb, 0x1f, 0x03, 0x00, 0x0e, 0x00, 0x61, 
	0x00, 0x0a, 0x01, 0xf0, 0x98, 0x20, 0x03, 0x60, 0x40, 0x44, 0x00, 0x20, 0x20, 0x84, 0x00, 0x00, 
	0x10, 0x35, 0x11, 0x04, 0x88, 0x24, 0xa2, 0x04, 0x00, 0x04, 0xa0, 0x06, 0x00, 0x04, 0x68, 0x1a, 
	0x00, 0x04, 0x51, 0xca, 0x18, 0x00, 0x0e, 0x70, 0x7c, 0x00, 0x98, 0x08, 0x38, 0x10, 0xc6, 0x73, 
	0x38, 0x38, 0xc0, 0x01, 0x00, 0x10, 0x9c, 0x19, 0x00, 0x00, 0x05, 0xe0, 0x80, 0x01, 0x58, 0x0a, 
	0xc0, 0x03, 0x28, 0x12, 0x80, 0x01, 0xa0, 0x04, 0x00, 0x00, 0x30, 0x04, 0x00, 0x00, 0x10, 0x04
};
// 'dashboard', 32x32px
const unsigned char icon_dashboard [] PROGMEM =
{
	0x00, 0xf0, 0x0f, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x80, 0xe3, 0xcf, 0x01, 0xc0, 0x3c, 0x3c, 0x03, 
	0x60, 0xe7, 0xe7, 0x06, 0xb0, 0xf9, 0x9f, 0x0d, 0xd8, 0x8e, 0x71, 0x1b, 0x6c, 0x0f, 0xf0, 0x36, 
	0xb4, 0x09, 0x90, 0x2d, 0xd6, 0x00, 0x00, 0x6b, 0xda, 0x00, 0x10, 0x5b, 0xea, 0x01, 0x88, 0x57, 
	0x2b, 0x00, 0x0c, 0xd4, 0x3d, 0x00, 0x06, 0xbc, 0x35, 0x80, 0x03, 0xac, 0x75, 0xc0, 0x03, 0xae, 
	0x65, 0xc0, 0x03, 0xa6, 0x05, 0x80, 0x01, 0xa0, 0x0d, 0x00, 0x00, 0xb0, 0xfb, 0xff, 0xff, 0xdf, 
	0x02, 0x00, 0x00, 0x40, 0x02, 0xfe, 0x7f, 0x40, 0x06, 0x03, 0xc0, 0x60, 0x84, 0xf1, 0x8f, 0x21, 
	0x8c, 0xf1, 0x8f, 0x31, 0x18, 0x03, 0xc0, 0x18, 0x30, 0xfe, 0x7f, 0x0c, 0x60, 0x00, 0x00, 0x06, 
	0xc0, 0x00, 0x00, 0x03, 0x80, 0x03, 0xc0, 0x01, 0x00, 0x1e, 0x78, 0x00, 0x00, 0xf0, 0x0f, 0x00
};
// 'eraser', 32x32px
const unsigned char icon_eraser [] PROGMEM =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0xe3, 0x00, 
	0x00, 0x80, 0xc1, 0x01, 0x00, 0xc0, 0x80, 0x03, 0x00, 0x60, 0x00, 0x07, 0x00, 0x30, 0x00, 0x0e, 
	0x00, 0x18, 0x00, 0x1c, 0x00, 0x0c, 0x00, 0x38, 0x00, 0x06, 0x00, 0x70, 0x00, 0x03, 0x00, 0x60, 
	0x80, 0x01, 0x00, 0x40, 0xc0, 0x00, 0x00, 0x60, 0xe0, 0x00, 0x00, 0x30, 0xf0, 0x01, 0x00, 0x18, 
	0x98, 0x03, 0x00, 0x0c, 0x0c, 0x07, 0x00, 0x06, 0x06, 0x0e, 0x00, 0x03, 0x06, 0x1c, 0x80, 0x01, 
	0x06, 0x38, 0xc0, 0x00, 0x02, 0x70, 0x60, 0x00, 0x06, 0xe0, 0x30, 0x00, 0x06, 0xc0, 0x19, 0x00, 
	0x06, 0x80, 0x0f, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x18, 0x00, 0x03, 0x00, 0x30, 0x80, 0x01, 0x00, 
	0x60, 0xc0, 0x00, 0x00, 0xc0, 0xfb, 0x00, 0x00, 0x80, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00
};
// 'manual', 32x32px
const unsigned char icon_manual [] PROGMEM =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x01, 0x0c, 0x30, 0x80, 0x01, 0x0c, 
	0x30, 0x80, 0x01, 0x0c, 0x30, 0xe0, 0x07, 0x0c, 0x30, 0xe0, 0x07, 0x0c, 0x30, 0x60, 0x06, 0x0c, 
	0x30, 0xe0, 0x07, 0x0c, 0x30, 0xe0, 0x07, 0x0c, 0xfc, 0x80, 0x01, 0x3f, 0xfc, 0x80, 0x01, 0x3f, 
	0xcc, 0x80, 0x01, 0x33, 0xfc, 0x80, 0x01, 0x3f, 0xfc, 0xbc, 0x3d, 0x3f, 0x30, 0xbe, 0x7d, 0x0c, 
	0x30, 0x36, 0x6c, 0x0c, 0x30, 0xce, 0x73, 0x0c, 0x30, 0xee, 0x77, 0x0c, 0xb0, 0x77, 0xee, 0x0d, 
	0xb0, 0x33, 0xcc, 0x0d, 0xb0, 0x33, 0xcc, 0x0d, 0xb0, 0x77, 0xee, 0x0d, 0x30, 0xee, 0x77, 0x0c, 
	0x30, 0xce, 0x73, 0x0c, 0x30, 0x36, 0x6c, 0x0c, 0x30, 0x7e, 0x7e, 0x0c, 0x30, 0xfc, 0x3f, 0x0c, 
	0x30, 0xc0, 0x03, 0x0c, 0x30, 0xc0, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'reset', 32x32px
const unsigned char icon_reset [] PROGMEM =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x78, 0x0c, 0x00, 0x00, 0x3c, 0x1c, 
	0x00, 0x00, 0x0f, 0x38, 0x00, 0x80, 0x47, 0x30, 0x00, 0xe0, 0x61, 0x70, 0x00, 0x70, 0xe0, 0x60, 
	0x00, 0x3c, 0xe4, 0x60, 0x00, 0x0e, 0xee, 0x70, 0x80, 0x0f, 0x4e, 0x3c, 0xc0, 0x1f, 0x0e, 0x1e, 
	0xf0, 0x18, 0x8e, 0x07, 0x38, 0x38, 0xc0, 0x01, 0x1e, 0x30, 0xf0, 0x00, 0x06, 0x60, 0x38, 0x00, 
	0x06, 0xe0, 0x1e, 0x00, 0x06, 0xc0, 0x07, 0x00, 0x0e, 0xc0, 0x03, 0x00, 0x1c, 0xe0, 0x00, 0x00, 
	0x18, 0x78, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


//===============================================================
// Enums
//===============================================================
enum MixtureSetting : uint16_t
{
  eLiquid1 = 0,
  eLiquid2 = 1,
  eLiquid3 = 2
};
const int MixtureSettingsMax = 3;

enum MixerState : uint16_t
{
  eMenu = 0,
  eDashboard = 1,
  eCleaning = 2,
  eManual = 3,
  eReset = 4
};
const int MixerStateMax = 4;

enum MixerEvent : uint16_t
{
  eEntry = 0,
  eMain = 1,
  eExit = 2
};
const int MixerEventMax = 3;


//===============================================================
// Class for handling display functions
//===============================================================
class DisplayDriver
{
  public:
    // Constructor
    DisplayDriver(Adafruit_ST7789* tft);

    // Initializes the display driver
    void Begin();

    // Updates the setting value
    void UpdateSetting(MixtureSetting currentSetting);

    // Updates the angles values
    void UpdateAngles(int16_t liquid1Angle_Degrees, int16_t liquid2Angle_Degrees, int16_t liquid3Angle_Degrees);

    // Updates the percentage values
    void UpdatePercentages(double liquid1_Percentage, double liquid2_Percentage, double liquid3_Percentage);

    // Draws intro page
    void ShowIntroPage();
    
    // Draws cleaning page
    void ShowCleaningPage(bool cleaningAll);
    
    // Draws help page
    void ShowHelpPage();
    
    // Draws dashboard page
    void ShowDashboardPage();

    // Draws menu page
    void ShowMenuPage(MixerState menuState);

    // Draws manual page
    void ShowManualPage();
    
    // Draws the info box
    void DrawInfoBox(const String &line1, const String &line2);

    // Draws the menu
    void DrawMenu(MixerState menuState, bool isfullUpdate);

    // Draw checkboxes
    void DrawCheckBoxes(bool cleaningAll);
    
    // Draws the legend
    void DrawLegend();
    
    // Draws current values
    void DrawCurrentValues(bool isfullUpdate = false);

    // Draws full doughnut chart
    void DrawDoughnutChart3();
    
    // Draws doughnut chart
    void DrawDoughnutChart3(bool clockwise, bool isfullUpdate = false);

    // Draws bargraph
    void DrawBargraph(bool isfullUpdate = false);

  private:
    Adafruit_ST7789* _tft;
    SPIFFS_ImageReader reader;

    bool _spiffsAvailable = false;

    // Mixture Settings
    MixtureSetting _currentSetting = eLiquid1;
    int16_t _liquid1Angle_Degrees = 0;
    int16_t _liquid2Angle_Degrees = 0;
    int16_t _liquid3Angle_Degrees = 0;
    double _liquid1_Percentage = 0.0;
    double _liquid2_Percentage = 0.0;
    double _liquid3_Percentage = 0.0;

    char output[30];
        
    // Last draw values
    MixtureSetting _lastDrawCurrentSetting = eLiquid1;
    MixerState _lastDrawMenuState = eDashboard;
    int16_t _lastDraw_liquid1Angle_Degrees = 0;
    int16_t _lastDraw_liquid2Angle_Degrees = 0;
    int16_t _lastDraw_liquid3Angle_Degrees = 0;
    double _lastDraw_liquid1_Percentage = 0.0;
    double _lastDraw_liquid2_Percentage = 0.0;
    double _lastDraw_liquid3_Percentage = 0.0;
    String _lastDraw_Liquid1String = "";
    String _lastDraw_Liquid2String = "";
    String _lastDraw_Liquid3String = "";

    // Draws default header Text
    void DrawHeader();
    
    // Draws header Text
    void DrawHeader(const String &text);
    
    // Only draws partial update of arcs
    void DrawPartial(int16_t angle, int16_t lastAngle,  uint16_t colorAfter, uint16_t colorBefore, bool clockwise);
    
    // Draw an arc with a defined thickness
    void FillArc(int16_t start_angle, int16_t distance_Degrees, uint16_t color);
    
    // Draws a string centered
    void DrawCenteredString(const String &text, int16_t x, int16_t y, bool underlined, uint16_t lineColor);
    
    // Formats double value
    String FormatValue(double value, int mainPlaces, int decimalPlaces);
};
#endif
    
